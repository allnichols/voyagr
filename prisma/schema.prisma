// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   Int     @id @default(autoincrement())
  name String?

  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  trips         Trip[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Trip {
  id            Int       @id @default(autoincrement())
  userId        Int
  destination   String
  departureDate DateTime
  returnDate    DateTime
  preferences   String[]
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  days          TripDay[]
}

model TripDay {
  id         Int            @id @default(autoincrement())
  tripId     Int
  dayNumber  Int
  date       DateTime
  trip       Trip           @relation(fields: [tripId], references: [id], onDelete: Cascade)
  activities TripActivity[]

  @@unique([tripId, dayNumber])
}

model TripActivity {
  id        Int      @id @default(autoincrement())
  tripDayId Int
  position  Int      @default(1) // <- for keeping track of order of activities
  timeOfDay String?
  place     String
  gPlaceId  String?
  address   String?
  iconMask  String?
  rating    Int?
  priceLevel String?
  userRatingCount Int?
  currentOpeningHours Int?
  internationalPhoneNumber String?
  nationalPhoneNumber String?
  websiteUri String?
  types String?
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())

  tripDay TripDay @relation(fields: [tripDayId], references: [id], onDelete: Cascade)
  @@index([tripDayId, position])
}
